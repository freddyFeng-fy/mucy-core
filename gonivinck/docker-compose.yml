version: '3.5'
# 网络配置
networks:
  backend:
    driver: bridge

# 服务容器配置
services:
  etcd:                                  # 自定义容器名称
    image: 'bitnami/etcd:latest'
    container_name: 'mucy-etcd'
    environment:
      - TZ=Asia/Shanghai
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:                               # 设置端口映射
      - "2379:2379"
    networks:
      - backend
    restart: always

  etcd-manage:
    image: 'lykart/etcdkeeper'
    container_name: 'mucy-etcd-manage'
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "7001:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      - backend
    restart: always

  apisix:
    image: apache/apisix
    container_name: 'mucy-apisix'
    volumes:
      - ./apisix/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ports:
      - "7002:9080/tcp"
      - "7003:9443/tcp"
    networks:
      - backend
    restart: always

  apisix-dashboard:
    image: apache/apisix-dashboard
    container_name: 'mucy-apisix-dashboard'
    ports:
      - 7004:9000
    volumes:
      - ./apisixDashboard/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    networks:
      - backend
    restart: always

  postgres:
    image: postgres:16.0
    container_name: 'mucy-postgres'
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: mucy-prod #postgres
      POSTGRES_PASSWORD: FY950319 #1234
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
      - "7005:5432"
    networks:
      - backend
    restart: always

  mucy-user:
      image: ghcr.io/freddyfeng-fy/mucy-user-server:prod
      container_name: 'mucy-user'
      ports:
        - "10001:10001"
      networks:
        - backend
      restart: always

  mucy-config:
    image: ghcr.io/freddyfeng-fy/mucy-config-server:prod
    container_name: 'mucy-config'
    ports:
      - "10003:10003"
    networks:
      - backend
    restart: always

  mucy-file:
      image: ghcr.io/freddyfeng-fy/mucy-file-server:prod
      container_name: 'mucy-file'
      ports:
        - "10002:10002"
      networks:
        - backend
      restart: always

#  elasticsearch:
#    image: elasticsearch:7.12.0
#    container_name: mucy-elasticsearch
#    environment:
#      - ES_MIN_MEM=128m
#      - ES_MAX_MEM=4096m
#    ports:
#      - "7005:9200"
#      - "7006:9300"
#    volumes:
#      - ./elasticsearch/data:/usr/share/elasticsearch/data/
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
#      - ./elasticsearch/plugins/:/usr/share/elasticsearch/plugins
#    networks:
#      - backend
#    restart: always

#  zookeeper:
#    image: wurstmeister/zookeeper:3.4.6
#    volumes:
#      - ./zookeeper/data:/opt/zookeeper-3.4.6/data
#    container_name: mucy-zookeeper
#    ports:
#      - "7007:2181"
#      - "7008:2182"
#    networks:
#      - backend
#    restart: always
#  kafka:
#    image: wurstmeister/kafka
#    container_name: mucy-kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "7009:9092"
#    environment:
#      - KAFKA_BROKER_NO=0
#      - KAFKA_BROKER_ID=0
#      - KAFKA_LISTENERS=PLAINTEXT://mucy-kafka:9092           # kafka tcp 侦听的ip
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.14:7009    # kafka broker侦听的ip
#      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#      - KAFKA_ZOOKEEPER_CONNECT=mucy-zookeeper:2181
#      - KAFKA_HEAP_OPTS=-Xmx512M -Xms16M
#    networks:
#      - backend
#    restart: always
#    # kafka集群管理面板
#  kafka_manager:
#    image: sheepkiller/kafka-manager
#    container_name: mucy-kafka-manager
#    ports:
#      - "7010:9000"
#    environment:
#      - ZK_HOSTS=mucy-zookeeper:2181
#    depends_on:
#      - zookeeper
#      - kafka
#    networks:
#      - backend
#    restart: always
#  prometheus:
#    image: 'bitnami/prometheus'
#    container_name: 'mucy-prometheus'
#    environment:
#      - TZ=${TZ}
#    privileged: true
#    volumes:
#      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
#    ports:
#      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
#    networks:
#      - backend
#    restart: always
#
#  grafana:
#    image: 'grafana/grafana'
#    container_name: 'mucy-grafana'
#    environment:
#      - TZ=${TZ}
#    ports:
#      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
#    networks:
#      - backend
#    restart: always
#
#  jaeger:
#    image: 'jaegertracing/all-in-one'
#    container_name: 'mucy-jaeger'
#    environment:
#      - TZ=${TZ}
#    ports:
#      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
#    networks:
#      - backend
#    restart: always
#
#  dtm:
#    image: 'yedf/dtm'
#    container_name: 'mucy-dtm'
#    environment:
#      - TZ=${TZ}
#    entrypoint:
#      - "/app/dtm/dtm"
#      - "-c=/app/dtm/configs/config.yaml"
#    privileged: true
#    volumes:
#      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
#    ports:
#      - "${DTM_HTTP_PORT}:36789"
#      - "${DTM_GRPC_PORT}:36790"
#    networks:
#      - backend
#    restart: always
